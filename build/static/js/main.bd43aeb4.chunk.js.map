{"version":3,"sources":["common/util/rem/index.js","common/util/axios/index.js","common/util/axios/const.js","common/util/bridge/index.js","common/util/env/index.js","pages/TestBridge/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getZoomRatio","doc","document","user_webset_font","documentElement","currentStyle","getComputedStyle","e","console","log","parseFloat","throttle","msg","alert","aimsAxios","axios","create","axiosParseCode","response","status","data","code","Promise","reject","interceptors","use","error","startBridge","frBridge","initBridgeReady","agent","navigator","userAgent","ua","toLowerCase","ENV_IS_ADR","match","test","window","screen","height","width","indexOf","location","protocol","networkType","networkStr","replace","getNetworkType","count","WebViewJavascriptBridgeNotInited","api","parameter","callback","WebViewJavascriptBridge","init","callHandler","resolve","addEventListener","param","then","ret","JSON","parse","callBack","WVJBCallbacks","push","WVJBIframe","createElement","style","display","src","appendChild","setTimeout","removeChild","setupWebViewJavascriptBridge","bridge","TestBridge","props","onClick","type","stringify","FR_GLOBAL_REM_NORAML","docEl","resizeEvt","zoomRatio","recalc","clientWidth","fontSize","util","App","className","path","component","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bd43aeb4.chunk.js","sourcesContent":["\n\nconst getZoomRatio = () => {\n    let doc = document, user_webset_font = 16;\n\n    try {\n        if(doc.documentElement.currentStyle) {\n            user_webset_font = doc.documentElement.currentStyle['fontSize'];\n        } else {\n            user_webset_font = getComputedStyle(doc.documentElement,false)['fontSize'];\n        }\n    }catch (e) {\n        console.log(e)\n    }\n\n    return 16/parseFloat(user_webset_font)\n    //return 1\n\n};\n\n\nexport const remSet = () => {\n    window.FR_GLOBAL_REM_NORAML = true;\n    let docEl = document.documentElement,\n        resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize';\n    const zoomRatio = getZoomRatio();\n\n    let recalc = () => {\n        let clientWidth = docEl.clientWidth;\n        if (!clientWidth) return;\n        docEl.style.fontSize = zoomRatio * 10 * (clientWidth / 375) + 'px';  /*计算出来的结果表示 1rem等于20px*/\n    };\n    if (!document.addEventListener) return;\n    window.addEventListener(resizeEvt, recalc, false);\n    document.addEventListener('DOMContentLoaded', recalc, false);\n};\n\nexport const remInit = () => {\n    /*根据高清方案设置的rem*/\n    console.log(1)\n    window.FR_GLOBAL_REM_DPR = true;\n    const zoomRatio = getZoomRatio();\n    let dpr, rem, scale;\n    const docEl = document.documentElement;\n    const fontEl = document.createElement('style');\n    const metaEl = document.querySelector('meta[name=\"viewport\"]');\n\n    const clWidth = docEl.clientWidth || document.body.clientWidth || window.localStorage.getItem('FR_GLOBAL_CLIENT_WIDTH');\n    window.localStorage.setItem('FR_GLOBAL_CLIENT_WIDTH', clWidth);\n\n    dpr = window.devicePixelRatio || 1;\n\n    /* docEl.style.fontSize = 20 * (clientWidth / 375) + 'px'*/\n\n    rem = zoomRatio * clWidth * dpr * 10 / 375;\n\n    scale = 1 / dpr;\n\n\n// 设置viewport，进行缩放，达到高清效果\n    metaEl.setAttribute('content', 'width=' + dpr * docEl.clientWidth + ', initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ', user-scalable=no');\n\n// 设置data-dpr属性，留作的css hack之用\n    docEl.setAttribute('data-dpr', dpr);\n\n// 动态写入样式\n    docEl.firstElementChild.appendChild(fontEl);\n    fontEl.innerHTML = 'html{font-size:' + rem + 'px!important;}';\n};\n\n\n\n","import axios from \"axios\";\nimport {\n  AXIOS_CODE_SUCCESS,\n  AXIOS_CODE_OTHER_LOGIN,\n  AXIOS_CODE_OTHER_LOGIN_MSG,\n  AXIOS_CODE_TIMEOUT,\n  AXIOS_CODE_TIMEOUT_MSG,\n  AXIOS_CODE_NOT_LOGIN,\n  AXIOS_CODE_NOT_LOGIN_MSG,\n  AXIOS_CODE_LOGOUT,\n  AXIOS_CODE_LOGOUT_MSG,\n} from \"./const\";\nconst throttle = (msg) => {\n  alert(msg);\n};\nconst aimsAxios = axios.create();\nexport const axiosParseCode = (response) => {\n  switch (response.status) {\n    case 200:\n    case 300:\n    case 301:\n    case 302:\n      switch (response.data.code) {\n        case AXIOS_CODE_SUCCESS:\n          return response.data;\n\n        default:\n          throttle(response.data.msg);\n          return Promise.reject();\n      }\n\n    default:\n      throttle(response.data.msg);\n      return Promise.reject();\n  }\n};\n\naimsAxios.interceptors.response.use(\n  function (response) {\n    return axiosParseCode(response);\n  },\n  function (error) {\n    throttle(\"请求失败\");\n    return Promise.reject(error);\n  }\n);\n\nexport default aimsAxios;\n","export const AXIOS_CODE_SUCCESS = 0;","\n/*  支持bridge调用的基础方法\n    1. startBridge 方法是异步调用\n    2. 尽量使用 bridge目录下的const.js里面的常量\n    3. 如果有问题可以和原生一起调试，逐步完善\n\n    使用方法:\n    import startBridge from 'fr-base/refine/fr-util/bridge';\n\n    startBridge(BRIDGE_METHOD_GET_DATA, {\n        type: BRIDGE_DATA_TYPE_USER\n    }).then((ret) => {\n        xxx\n    });\n\n    参考项目:\n    https://github.com/lzyzsd/JsBridge\n    https://github.com/marcuswestin/WebViewJavascriptBridge\n    */\n\n\n\nimport { ENV_IS_ADR } from '../env';\n\n\nlet startBridge, frBridge, initBridgeReady;\nlet count = 0;\nif(ENV_IS_ADR) {\n    /*安卓bridge方案*/\n    let WebViewJavascriptBridgeNotInited = true;\n    frBridge = function (api, parameter, callback) {\n        try {\n            /*这里有可能和其他bridge方式混用，其他地方执行window.WebViewJavascriptBridge.init()，页面就会抛错*/\n            if(WebViewJavascriptBridgeNotInited) {\n                window.WebViewJavascriptBridge.init();\n                WebViewJavascriptBridgeNotInited = false;\n            }\n        }catch (e) {\n\n        }\n    \n        window.WebViewJavascriptBridge.callHandler(api, parameter, callback);\n    };\n    initBridgeReady = function () {\n        return new Promise(function (resolve, reject) {\n            if (window.WebViewJavascriptBridge) {\n                resolve();\n            } else {\n                document.addEventListener(\n                    'WebViewJavascriptBridgeReady'\n                    , function () {\n                        resolve(window.WebViewJavascriptBridge);\n                    },\n                    false\n                );\n            }\n        })\n    };\n   startBridge = function (api, param) {\n        return new Promise(function (resolve, reject) {\n            initBridgeReady().then(() => {\n                frBridge(api, param, function (ret) {\n                    /* 在这里调用 console.log 似乎能减少出现获取环境超时的概率。。。*/\n                    console.log(count++)\n                    resolve(JSON.parse(ret))\n                });\n            });\n        })\n    };\n} else {\n    /*ios bridge方案*/\n    const setupWebViewJavascriptBridge =  (callback) => {\n        if (window.WebViewJavascriptBridge) { return callback(window.WebViewJavascriptBridge); }\n        if (window.WVJBCallbacks) { return window.WVJBCallbacks.push(callback); }\n        window.WVJBCallbacks = [callback];\n        let WVJBIframe = document.createElement('iframe');\n        WVJBIframe.style.display = 'none';\n        WVJBIframe.src = 'https://__bridge_loaded__';\n        document.documentElement.appendChild(WVJBIframe);\n        setTimeout(function() { document.documentElement.removeChild(WVJBIframe) }, 0)\n    };\n    frBridge = function (api, param, callBack) {\n        setupWebViewJavascriptBridge(function(bridge) {\n            bridge.callHandler(api, param, callBack)\n        })\n    };\n    startBridge = function (api, param) {\n        return new Promise(function (resolve, reject) {\n            frBridge(api, param, function (ret) {\n                resolve(JSON.parse(ret))\n            });\n        })\n    };\n}\n\nexport default startBridge\n\n\n\n\n\n","const  agent  = navigator.userAgent;\nconst  ua  = navigator.userAgent.toLowerCase();\n\nexport const ENV_IS_IOS = !!agent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) || /iphone|ipad|ipod/.test(ua);\n\nexport const ENV_IS_ADR = !ENV_IS_IOS;\n\nexport const ENV_IS_IPHONEX = /iphone/gi.test(agent) && (window.screen.height === 812 && window.screen.width === 375);\nexport const ENV_IS_FENGRONG = agent.indexOf('fengrong') > -1;\nexport const ENV_SYSTEM = ENV_IS_ADR ? 'Android' : 'iOS';\nexport const ENV_IS_ONLINE =  window.location.protocol.indexOf('https') > -1;\nexport const ENV_IS_WX = ua.match(/MicroMessenger/i) == \"micromessenger\";\nexport const ENV_NETWORK_TYPE = getNetworkType();\n\n\nexport const ENV_PLAT_TYPE =  ENV_IS_ADR ? 1 : 2;\nexport const ENV_PLAT_TYPE_DAIHOU =  ENV_IS_ADR ? 31 : 32;\nexport const ENV_PLAT_VERSION_DAIHOU =  2;\n\nfunction getNetworkType() {\n    var ua = navigator.userAgent;\n    var networkStr = ua.match(/NetType\\/\\w+/) ? ua.match(/NetType\\/\\w+/)[0] : 'NetType/other';\n    networkStr = networkStr.toLowerCase().replace('nettype/', '');\n    var networkType;\n    switch (networkStr) {\n        case 'wifi':\n            networkType = 'wifi';\n            break;\n        case '4g':\n            networkType = '4g';\n            break;\n        case '3g':\n            networkType = '3g';\n            break;\n        case '3gnet':\n            networkType = '3g';\n            break;\n        case '2g':\n            networkType = '2g';\n            break;\n        default:\n            networkType = 'other';\n    }\n    return networkType;\n}","import React, { useEffect } from \"react\";\nimport startBridge from \"../../common/util/bridge\";\nconst TestBridge = (props: any) => {\n  return (\n    <div>\n      <button\n        onClick={() => {\n          startBridge(\"getData\", {\n            type: \"userInfo\",\n          }).then((ret) => {\n            alert(JSON.stringify(ret));\n          });\n        }}\n      >\n        测试getData userInfo\n      </button>\n      <br />\n      <button\n        onClick={() => {\n          startBridge(\"getData\", {\n            type: \"device\",\n          }).then((ret) => {\n            alert(JSON.stringify(ret));\n          });\n        }}\n      >\n        测试getData device\n      </button>\n    </div>\n  );\n};\n\nexport default TestBridge;\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport \"./App.less\";\nimport CardShare from \"./pages/liveShare/CardShare\";\nimport GuessPrize from \"./pages/liveShare/GuessPrize\";\nimport MyLevel from \"./pages/liveShare/MyLevel\";\nimport MyNoble from \"./pages/liveShare/MyNoble\";\nimport * as util from './common/util'\nimport TestBridge from \"./pages/TestBridge\";\n\nutil.remSet()\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route path=\"/\" component={TestBridge} />\n\n        {/* <Route path=\"/live-share/card-share\" component={CardShare} />\n        <Route path=\"/live-share/guess-price\" component={GuessPrize} />\n        <Route path=\"/live-share/my-level\" component={MyLevel} />\n        <Route path=\"/live-share/my-noble\" component={MyNoble} /> */}\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}